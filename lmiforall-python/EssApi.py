#!/usr/bin/env python
"""
WordAPI.py
Copyright 2012 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from models import *


class EssApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    
    def getESSRegion(self, soc, region, **kwargs):
        """Get Hard-To-Fill and Skill Shortage Vacancy percentages for a given SOC code.

        Args:
            soc, int: SOC Code for the job. (required)
            region, int: Region code. Get this from /regions. (required)
            
        Returns: 
        """

        allParams = ['soc', 'region']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getESSRegion" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/ess/region/{region}/{soc}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('soc' in params):
            replacement = str(self.apiClient.toPathValue(params['soc']))
            resourcePath = resourcePath.replace('{' + 'soc' + '}',
                                                replacement)
        if ('region' in params):
            replacement = str(self.apiClient.toPathValue(params['region']))
            resourcePath = resourcePath.replace('{' + 'region' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        
        
    def getRegions(self, **kwargs):
        """Get a list of all available regions and their codes.

        Args:
            
        Returns: Map[string, int]
        """

        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getRegions" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/ess/regions'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Map[string, int]')
        return responseObject
        
        
    def getESS(self, soc, **kwargs):
        """Get Hard-To-Fill and Skill Shortage Vacancy percentages for a given SOC code.

        Args:
            soc, int: SOC Code for the job. (required)
            
        Returns: 
        """

        allParams = ['soc']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getESS" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/ess/uk/{soc}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('soc' in params):
            replacement = str(self.apiClient.toPathValue(params['soc']))
            resourcePath = resourcePath.replace('{' + 'soc' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        
        
    


