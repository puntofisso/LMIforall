#!/usr/bin/env python
"""
WordAPI.py
Copyright 2012 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from models import *


class LfsApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    
    def getFilterNames(self, **kwargs):
        """Get a list of all available filter names.

        Args:
            
        Returns: list[str]
        """

        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFilterNames" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/lfs/filters'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'list[str]')
        return responseObject
        
        
    def getAllFiltersInfo(self, **kwargs):
        """Get a list of all available filters and their codings.

        Args:
            
        Returns: list[LFSFilterInfo]
        """

        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getAllFiltersInfo" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/lfs/filters/all'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'list[LFSFilterInfo]')
        return responseObject
        
        
    def getFilterInfo(self, name, **kwargs):
        """Get more information about a certain filter.

        Args:
            name, str: The name of the filter. (required)
            
        Returns: LFSFilterInfo
        """

        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFilterInfo" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/lfs/filters/info/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'LFSFilterInfo')
        return responseObject
        
        
    def getWeeklyPay(self, soc, **kwargs):
        """Get weekly pay for a certain SOC code, optionally filtered by a set of characteristics.

        Args:
            soc, int: SOC code of the job. (required)
            minYear, int: Only include results from this year and beyond. (optional)
            maxYear, int: Only include results up to and from this year. (optional)
            filterBy, str: A list of sets of filter names and codes to apply. Example: 'gender:1|ageband:2,3' (optional)
            
        Returns: LFSPayResult
        """

        allParams = ['soc', 'minYear', 'maxYear', 'filterBy']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getWeeklyPay" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/lfs/weeklypay'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('soc' in params):
            queryParams['soc'] = self.apiClient.toPathValue(params['soc'])
        if ('minYear' in params):
            queryParams['minYear'] = self.apiClient.toPathValue(params['minYear'])
        if ('maxYear' in params):
            queryParams['maxYear'] = self.apiClient.toPathValue(params['maxYear'])
        if ('filterBy' in params):
            queryParams['filterBy'] = self.apiClient.toPathValue(params['filterBy'])
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'LFSPayResult')
        return responseObject
        
        
    def getWeeklyPayBreakdown(self, soc, breakdownBy, **kwargs):
        """Get weekly pay for a certain SOC code, optionally filtered by a set of characteristics. Break it down across one of the filters.

        Args:
            soc, int: SOC code of the job. (required)
            minYear, int: Only include results from this year and beyond. (optional)
            maxYear, int: Only include results up to and from this year. (optional)
            filterBy, str: A list of sets of filter names and codes to apply. Example: 'gender:1|ageband:2,3' (optional)
            breakdownBy, str: Break results down along this characteristic. (required)
            
        Returns: LFSPayResultBreakdown
        """

        allParams = ['soc', 'minYear', 'maxYear', 'filterBy', 'breakdownBy']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getWeeklyPayBreakdown" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/lfs/weeklypay/breakdown/{breakdownBy}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('soc' in params):
            queryParams['soc'] = self.apiClient.toPathValue(params['soc'])
        if ('minYear' in params):
            queryParams['minYear'] = self.apiClient.toPathValue(params['minYear'])
        if ('maxYear' in params):
            queryParams['maxYear'] = self.apiClient.toPathValue(params['maxYear'])
        if ('filterBy' in params):
            queryParams['filterBy'] = self.apiClient.toPathValue(params['filterBy'])
        if ('breakdownBy' in params):
            replacement = str(self.apiClient.toPathValue(params['breakdownBy']))
            resourcePath = resourcePath.replace('{' + 'breakdownBy' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'LFSPayResultBreakdown')
        return responseObject
        
        
    


